#@echo OFF

# Define the compiler to use
CC=gcc

# Define compiler flags; -I. tells the compiler to look for header files in the current directory
CFLAGS=-I.

# Define short forms for commonly used commands
MKDIR=mkdir -p      # Use -p to create parent directories as needed
RM=rm -rf           # Use -rf to force removal of files/directories
SRC_DIR=src      # Source directory
OBJ_DIR=obj         # Directory for object files
BIN_DIR=Bin         # Directory for executables

# Define a variable for the source files and object files
SRC_FILES = $(wildcard $(SRC_DIR)/*.c)  # All .c files in the sample directory
OBJ_FILES = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SRC_FILES))  # Convert .c file names to .o file names

# Define the target for the executable
TARGET = $(BIN_DIR)/Project_unsigned_bin

# Default target
all: create_dir $(OBJ_FILES) #$(TARGET)# Make sure directories are created before building

# Define a target named 'hello' that prints "Hello, World"
hello:
	@echo "Hello, World"

# Define a pattern rule that compiles every .c file into a .o file
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.c
	@echo "Compiling $< to $@"
	$(CC) -c $(CFLAGS) $< -o $@

# Build the executable
$(TARGET):
	@echo "Linking object files to create executable: $@"
	$(CC) -o $@ $^
 
# Define a target named 'clean' to remove generated files
clean: 
	@echo "Cleaning up generated files..."
	$(RM) $(OBJ_DIR) $(BIN_DIR)
	@echo "Cleanup complete."

# Target to create necessary directories
create_dir:
	@echo "Creating directories: $(OBJ_DIR) and $(BIN_DIR)"
	$(MKDIR) $(OBJ_DIR) $(BIN_DIR)